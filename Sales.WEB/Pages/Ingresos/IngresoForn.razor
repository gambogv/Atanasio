@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"/>

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
     <div class="mb-3">
        <label>Registro de ingreso:</label>
       <div>
            <label>Id boleta</label>
            <InputText class="form-control" @bind-Value="@Ingreso.IdBoleta" />
            <ValidationMessage For="@(() => Ingreso.IdBoleta)" />
       </div>
        <div>
            <label>Fecha</label>
            <InputText class="form-control" @bind-Value="@Ingreso.Fecha" />
            <ValidationMessage For="@(() => Ingreso.Fecha)" />
        </div>

        <div>
            <label>Porteria</label>
            <InputText class="form-control" @bind-Value="@Ingreso.porteria" />
            <ValidationMessage For="@(() => Ingreso.porteria)" />
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Guardar Cambios</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {
    private EditContext editContext = null!;

    [EditorRequired]
    [Parameter]
    public Ingreso Ingreso { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }


     public bool FormPostedSuccessfully { get; set; }


    protected override void OnInitialized()
    {
        editContext = new(Ingreso);
    }

     private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasMofied = editContext.IsModified();
        if (!formWasMofied || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Deseas abandonar la página y perder los cambios?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Si"
        });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
